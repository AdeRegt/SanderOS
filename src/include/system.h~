#define NULL 0
#define ATAPI_SECTOR_SIZE 2048

void kernel_main();

// screen
void printf(const char* format,...);
void putc(const char a);
char * itoa( int value, char * str, int base );
void puts(const char* format);
void cls();

// IDT
void setupIDT();
void lidt(void* base, unsigned short size);
extern void irq_defaulte();
void setInterrupt(int entity,unsigned long location);

// ports
void outportb(unsigned short port, unsigned char val);
unsigned char inportb(unsigned short port);
void outportw(unsigned short port, unsigned short val);
unsigned short inportw(unsigned short port);
void outportl(unsigned short port, unsigned long val);
unsigned long inportl(unsigned short port);

void insw (unsigned short port, void *addr, unsigned long cnt);

// pci
void detectDevices();
unsigned long pciConfigReadWord (unsigned char bus, unsigned char slot, unsigned char func, unsigned char offset);
extern unsigned short getcs();

// keyboard
void initialiseKeyboard();

// power
void acpiPowerOff(void);
int acpiEnable();

typedef struct {
	unsigned int io_base;
	unsigned int control;
	unsigned int slave;
	unsigned long read;
	unsigned long write;
	unsigned long eject;
}ata_device;

// atapi
void detectATAPI();
void initCDROM();
void readRawCDROM(unsigned long lba,unsigned char count,unsigned char* locationx);
unsigned char* readCDROM(char* path);

// ata
void detectHDDFilesystems(ata_device dev);

typedef struct {
	unsigned long read;
	unsigned long write;
	unsigned long eject;
	unsigned long identifier;
}Device;

typedef struct {
	unsigned long read;
	unsigned long write;
	unsigned long list;
	unsigned long remove;
	unsigned long device;
}Filesystem;

// mice
void setup_mouse();

int strlen(const char* A);
int strcmp(char* A,char* B);
void* memset(void* bufptr, int value, int size);
void* malloc(unsigned long t);

// ELF

#define true 1
#define false 0
typedef char bool;
typedef unsigned short Elf32_Half;	// Unsigned half int
typedef unsigned long Elf32_Off;	// Unsigned offset
typedef unsigned long Elf32_Addr;	// Unsigned address
typedef unsigned long Elf32_Word;	// Unsigned int
typedef long  Elf32_Sword;	// Signed int

#define ELF_NIDENT		16
#define ELF_RELOC_ERR 		-1
#define ELFMAG0			0x7F // e_ident[EI_MAG0]
#define ELFMAG1			'E'  // e_ident[EI_MAG1]
#define ELFMAG2			'L'  // e_ident[EI_MAG2]
#define ELFMAG3			'F'  // e_ident[EI_MAG3]
#define ELFDATA2LSB		(1)  // Little Endian
#define ELFCLASS32		(1)  // 32-bit Architecture
#define EM_386			(3)  // x86 Machine Type
#define EV_CURRENT		(1)  // ELF Current Version
#define SHN_UNDEF		(0x00) // Undefined/Not present
#define ELF32_ST_BIND(INFO)	((INFO) >> 4)
#define ELF32_ST_TYPE(INFO)	((INFO) & 0x0F)
#define ELF32_R_SYM(INFO)	((INFO) >> 8)
#define ELF32_R_TYPE(INFO)	((unsigned char)(INFO))
#define DO_386_32(S, A)	((S) + (A))
#define DO_386_PC32(S, A, P)	((S) + (A) - (P))
#define SHN_ABS			10234


enum RtT_Types {
	R_386_NONE		= 0, // No relocation
	R_386_32		= 1, // Symbol + Offset
	R_386_PC32		= 2  // Symbol + Offset - Section Offset
};
 typedef struct {
	Elf32_Addr		r_offset;
	Elf32_Word		r_info;
} Elf32_Rel;
 
typedef struct {
	Elf32_Addr		r_offset;
	Elf32_Word		r_info;
	Elf32_Sword		r_addend;
} Elf32_Rela;

enum StT_Bindings {
	STB_LOCAL		= 0, // Local scope
	STB_GLOBAL		= 1, // Global scope
	STB_WEAK		= 2  // Weak, (ie. __attribute__((weak)))
};
 
enum StT_Types {
	STT_NOTYPE		= 0, // No type
	STT_OBJECT		= 1, // Variables, arrays, etc.
	STT_FUNC		= 2  // Methods or functions
};
enum ShT_Types {
	SHT_NULL	= 0,   // Null section
	SHT_PROGBITS	= 1,   // Program information
	SHT_SYMTAB	= 2,   // Symbol table
	SHT_STRTAB	= 3,   // String table
	SHT_RELA	= 4,   // Relocation (w/ addend)
	SHT_NOBITS	= 8,   // Not present in file
	SHT_REL		= 9,   // Relocation (no addend)
};
 
enum ShT_Attributes {
	SHF_WRITE	= 0x01, // Writable section
	SHF_ALLOC	= 0x02  // Exists in memory
};
typedef struct {
	unsigned char		e_ident[ELF_NIDENT];
	Elf32_Half	e_type;
	Elf32_Half	e_machine;
	Elf32_Word	e_version;
	Elf32_Addr	e_entry;
	Elf32_Off	e_phoff;
	Elf32_Off	e_shoff;
	Elf32_Word	e_flags;
	Elf32_Half	e_ehsize;
	Elf32_Half	e_phentsize;
	Elf32_Half	e_phnum;
	Elf32_Half	e_shentsize;
	Elf32_Half	e_shnum;
	Elf32_Half	e_shstrndx;
} Elf32_Ehdr;

enum Elf_Ident {
	EI_MAG0		= 0, // 0x7F
	EI_MAG1		= 1, // 'E'
	EI_MAG2		= 2, // 'L'
	EI_MAG3		= 3, // 'F'
	EI_CLASS	= 4, // Architecture (32/64)
	EI_DATA		= 5, // Byte Order
	EI_VERSION	= 6, // ELF Version
	EI_OSABI	= 7, // OS Specific
	EI_ABIVERSION	= 8, // OS Specific
	EI_PAD		= 9  // Padding
};
 

enum Elf_Type {
	ET_NONE		= 0, // Unkown Type
	ET_REL		= 1, // Relocatable File
	ET_EXEC		= 2  // Executable File
};

typedef struct {
	Elf32_Word	sh_name;
	Elf32_Word	sh_type;
	Elf32_Word	sh_flags;
	Elf32_Addr	sh_addr;
	Elf32_Off	sh_offset;
	Elf32_Word	sh_size;
	Elf32_Word	sh_link;
	Elf32_Word	sh_info;
	Elf32_Word	sh_addralign;
	Elf32_Word	sh_entsize;
} Elf32_Shdr;

typedef struct {
	Elf32_Word		st_name;
	Elf32_Addr		st_value;
	Elf32_Word		st_size;
	unsigned char			st_info;
	unsigned char			st_other;
	Elf32_Half		st_shndx;
} Elf32_Sym;

void *elf_lookup_symbol(char* a);
bool elf_check_file(Elf32_Ehdr *hdr);
bool elf_check_supported(Elf32_Ehdr *hdr);
 void *elf_load_rel(Elf32_Ehdr *hdr);
void *elf_load_file(void *file);
 Elf32_Shdr *elf_sheader(Elf32_Ehdr *hdr);
 Elf32_Shdr *elf_section(Elf32_Ehdr *hdr, int idx);
 char *elf_str_table(Elf32_Ehdr *hdr);
 char *elf_lookup_string(Elf32_Ehdr *hdr, int offset);
int elf_get_symval(Elf32_Ehdr *hdr, int table, unsigned int idx);
int elf_load_stage1(Elf32_Ehdr *hdr);
int elf_load_stage2(Elf32_Ehdr *hdr);
int elf_do_reloc(Elf32_Ehdr *hdr, Elf32_Rel *rel, Elf32_Shdr *reltab);
void insmod(const char* path);

//
// FILESYSTEMCONTROL
//

int installBlockDevice(unsigned long read,unsigned long write,unsigned long size,unsigned long name);
int installFileSystem(unsigned long read,unsigned long write,unsigned int device,unsigned long name);
void devdump();

typedef struct {
	unsigned long read;
	unsigned long write;
	unsigned long size;
	unsigned char name[5];
}BlockDevice;

typedef struct {
	unsigned long read;
	unsigned long write;
	unsigned int device;
	unsigned long name;
} FileSystem;
